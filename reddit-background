#!/usr/bin/env python
"""
NAME

    reddit-background

SYNOPSIS

    reddit-background [options] [SUBREDDITS]

DESCRIPTION

    Set Mac OS X and Linux desktop backgrounds to images pulled from Reddit.

EXAMPLES

    reddit-backgrounds CarPorn:top:10:week {seasonal} EarthPorn:new

AUTHOR

    Rick Harris <rconradharris@gmail.com>
"""
import ConfigParser
import argparse
import datetime
import json
import math
import operator
import os
import random
import re
import shutil
import socket
import subprocess
import sys
import urllib2
import urlparse

__version__ = '2.0beta'

# Defaults
DEFAULT_SUBREDDIT_TOKENS = ['{seasonal}']
DEFAULT_CONFIG_PATH = u"~/.reddit-background.conf"
DEFAULT_DOWNLOAD_DIRECTORY = u"~/Reddit Backgrounds"
DEFAULT_USER_AGENT = "Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11"
DEFAULT_IMAGE_CHOOSER = 'bestmatch'

# Regexs
RE_RESOLUTION_DISPLAYS = re.compile("Resolution: (\d+)\sx\s(\d+)")

# Globals
_VERBOSITY = 0
_WHAT = False
_DESKTOP_SYMLINK = False
_DOWNLOAD_DIRECTORY = None
_IMAGE_COUNT = 0
_OS_HANDLER = None  # Set below...
_IMAGE_CHOOSER = None

# Consts
WEIGHT_ASPECT_RATIO = 1.0
WEIGHT_RESOLUTION = 1.0
WEIGHT_JITTER = 0.25
WEIGHT_REDDIT_SCORE = 1.0


def set_verbosity(verbosity):
    global _VERBOSITY
    _VERBOSITY = verbosity


def get_verbosity():
    return _VERBOSITY


def set_what(what):
    global _WHAT
    _WHAT = what


def get_what():
    return _WHAT


def set_desktop_symlink(desktop_symlink):
    global _DESKTOP_SYMLINK
    _DESKTOP_SYMLINK = desktop_symlink


def get_desktop_symlink():
    return _DESKTOP_SYMLINK


def set_download_directory(directory):
    global _DOWNLOAD_DIRECTORY
    _DOWNLOAD_DIRECTORY = directory


def get_download_directory():
    dirname = _DOWNLOAD_DIRECTORY or DEFAULT_DOWNLOAD_DIRECTORY
    # This needs to be Unicode so that os.listdir returns Unicode filenames
    return unicode(os.path.expanduser(dirname))


def set_image_count(image_count):
    global _IMAGE_COUNT
    _IMAGE_COUNT = image_count


def get_image_count():
    return _IMAGE_COUNT


def set_image_chooser(image_chooser):
    global _IMAGE_CHOOSER
    _IMAGE_CHOOSER = image_chooser


def get_image_chooser():
    return _IMAGE_CHOOSER or DEFAULT_IMAGE_CHOOSER


def _safe_makedirs(name, mode=0777):
    if not os.path.exists(name):
        os.makedirs(name, mode=mode)


def warn(msg):
    """Print a warning to stderr"""
    print >> sys.stderr, "warning: {}".format(msg)


def log(msg, level=1):
    """Log to stderr

    -v is level 1
    -vv is level 2
    etc...
    """
    if get_verbosity() >= level:
        print >> sys.stderr, msg


def _clear_desktop_symlinks():
    """The main purpose of the desktop symlink is to provide you an easy way
    to see the title of your desktop without having to use the --what option.

    (Assuming your desktop isn't too clutered ;-)
    """
    # Delete any existing desktop symlinks
    download_directory = get_download_directory()
    desktop_path = os.path.expanduser(u'~/Desktop')
    for filename in os.listdir(desktop_path):
        file_path = os.path.join(desktop_path, filename)
        if not os.path.islink(file_path):
            continue
        real_path = os.path.realpath(file_path)
        if real_path.startswith(download_directory):
            log(u"Deleting desktop symlink '{}'".format(file_path))
            os.unlink(file_path)


class OSHandler(object):
    """Any OS specific code should go in these classes."""
    def set_background(self, path, **kwargs):
        raise NotImplementedError

    def get_desktop_resolutions(self):
        raise NotImplementedError

    @classmethod
    def get_handler(cls):
        if sys.platform == 'darwin':
            return DarwinHandler()
        elif sys.platform == 'linux2':
            return LinuxHandler()
        else:
            raise Exception("OS not supported")


class DarwinHandler(OSHandler):
    def set_background(self, path, **kwargs):
        script = u'tell application "System Events" to set picture of item'\
                 u' {num} of (a reference to every desktop) to "{path}"'\
                 .format(num=kwargs['num'], path=path)
        cmd = ['/usr/bin/osascript', '-e', script]
        if subprocess.call(cmd):
            warn(u"unable to set background to '{}'".format(path))

    def get_desktop_resolutions(self):
        p = subprocess.Popen(["/usr/sbin/system_profiler", "SPDisplaysDataType"],
                         stdout=subprocess.PIPE)
        (output, err) = p.communicate()
        return re.findall(RE_RESOLUTION_DISPLAYS, output)


class LinuxHandler(OSHandler):
    def set_background(self, path, **kwargs):
        cmd = ['feh', '--bg-fill', path]
        if subprocess.call(cmd):
            warn(u"unable to set background to '{}'".format(path))

    def get_desktop_resolutions(self):
        # source: http://stackoverflow.com/questions/8705814/get-display-count-and-
        # resolution-for-each-display-in-python-without-xrandr
        import Xlib.display
        import Xlib.ext.randr
        d = Xlib.display.Display()
        s = d.screen()
        window = s.root.create_window(0, 0, 1, 1, 1, s.root_depth)
        res = Xlib.ext.randr.get_screen_resources(window)
        modes = []
        matches = []
        for output in res.outputs:
            # use largest resolution per output
            available_modes = Xlib.ext.randr.get_output_info(window, output, 0).modes
            if len(available_modes) > 0:
                modes.append(available_modes[0])

        for mode in res.modes:
            if mode.id in modes:
                matches.append((mode.width, mode.height))
        return matches


class ImageChooser(object):
    def __init__(self, desktop, images):
        self.desktop = desktop
        self.images = images

    def sort(self):
        raise NotImplementedError


class RandomImageChooser(ImageChooser):
    def sort(self):
        random.shuffle(self.images)


class BestMatchImageChooser(ImageChooser):

    def _score_reddit_score(self, image, log_lo_score, log_hi_score):
        """Scoring criteria: The higher the Reddit score, the better the
        image.

        Since Reddit scores are exponential ('hot' stuff is *much* higher in
        score than 'cold' stuff), we normalize using the log of the
        reddit_score.

        0 < score <= 1
        """
        log_score = math.log1p(image.raw_reddit_score)
        assert log_lo_score <= log_score <= log_hi_score, \
                u"lo={} score={} hi={}".format(
                    log_lo_score, log_score, log_hi_score)
        score = float(log_score - log_lo_score) / (log_hi_score - log_lo_score)
        log(u"reddit_score={:.2f} score={:.2f}".format(
            image.reddit_score, score), level=3)
        return score

    def _score_aspect_ratio(self, image):
        """Scoring criteria: The closer an image is to the aspect ratio of the
        desktop the better.

        0 < score <= 1
        1 is an exact match in terms of aspect ratio.
        """
        image_aspect_ratio = float(image.width) / image.height
        desktop_aspect_ratio = float(self.desktop.width) / self.desktop.height

        if image_aspect_ratio > desktop_aspect_ratio:
            score = desktop_aspect_ratio / image_aspect_ratio
        else:
            score = image_aspect_ratio / desktop_aspect_ratio

        log(u"image_aspect_ratio={:.2f} desktop_aspect_ratio={:.2f} score={:.2f}".format(
            image_aspect_ratio, desktop_aspect_ratio, score), level=3)

        return score

    def _score_resolution(self, image):
        """Scoring criteria: The higher the resolution an image the better.
        However, an image with resolution higher than the desktop is not
        better than any other image with resolution better than the desktop.

        0 < score <= 1
        1 best resolution
        """
        image_pixels = image.width * image.height
        desktop_pixels = self.desktop.width * self.desktop.height

        if image_pixels > desktop_pixels:
            score = 1.0
        else:
            score = float(image_pixels) / desktop_pixels

        log(u"image_pixels={:.2f} desktop_pixels={:.2f} score={:.2f}".format(
            image_pixels, desktop_pixels, score), level=3)

        return score

    def _score_jitter(self, image):
        score = random.random()
        log(u"jitter score={:.2f}".format(score), level=3)
        return score

    def sort(self):
        """
        Image Choosing Algorithm

        For images pulled from Reddit, we have the width and height metadata
        and so we can prefer images that will look better on a given desktop.

        To handle this we will assign a 'weight' to each image based on some
        criteria and then sort the images by that weight.

        The criteria is as follows:

            1) Aspect ratio: images that are similar in aspect ratio to the
               current desktop are preferred

            2) Resolution: images with higher resolution are preferred

            3) Jitter: a bit of randomness is added to that successive runs
               produce different results

            4) Reddit Score: images with higher scores on reddit are preferred

        The best images should go last because we treat this like a stack.
        """
        images = self.images
        log('Total candidate images: {}'.format(len(images)))

        raw_reddit_scores = [i.raw_reddit_score for i in images]
        log_lo_score = math.log1p(min(raw_reddit_scores))
        log_hi_score = math.log1p(max(raw_reddit_scores))

        # Score each image based on our criteria and their associated weight
        for image in images:
            log(u"Score components for '{}'".format(image.display_title), level=3)
            image.aspect_ratio_score = (
                    WEIGHT_ASPECT_RATIO * self._score_aspect_ratio(image))
            image.resolution_score = (
                WEIGHT_RESOLUTION * self._score_resolution(image))
            image.jitter_score = (
                WEIGHT_JITTER * self._score_jitter(image))
            image.reddit_score = (
                WEIGHT_REDDIT_SCORE * self._score_reddit_score(
                    image, log_lo_score, log_hi_score))
            score_parts = [image.aspect_ratio_score,
                           image.resolution_score,
                           image.jitter_score,
                           image.reddit_score]
            image.score = float(sum(score_parts)) / len(score_parts)

        # Sort so highest scoring images are last
        images.sort(key=operator.attrgetter('score'))

        # Display score table
        log(u"{:>10}{:>10}{:>10}{:>10}{:>10}{:>10} {}".format(
                                    u"Ranking",
                                    u"Score",
                                    u"Aspect",
                                    u"Res",
                                    u"Reddit",
                                    u"Jitter",
                                    u"Title"),
            level=2)
        log(u"=" * 120, level=2)
        for ranking, image in enumerate(images):
            log(u"{:>10d}{:>10.2f}{:>10.2f}{:>10.2f}{:>10.2f}{:>10.2f} {}".format(
                    len(images) - ranking,
                    image.score,
                    image.aspect_ratio_score,
                    image.resolution_score,
                    image.reddit_score,
                    image.jitter_score,
                    image.display_title),
                level=2)


_IMAGE_CHOOSER_CLASSES = {
    'random': RandomImageChooser,
    'bestmatch': BestMatchImageChooser,
}


class Desktop(object):
    def __init__(self, num, width, height, subreddit_tokens=None):
        self.num = num
        self.width = width
        self.height = height
        self.subreddit_tokens = subreddit_tokens or []
        # NOTE: we need to get the download-images at instantiation time and
        # cache the results b/c we'll later clear the download directory
        # before downloading the new images, meaning we can no longer tell
        # what's already been downloaded
        self.downloaded_images = self._get_downloaded_images()

    @property
    def subreddits(self):
        return [Subreddit.create_from_token(self, t)
                for t in self.subreddit_tokens]

    @property
    def download_directory(self):
        """Images are stored in ~/Reddit Backgrounds/Desktop 1"""
        subdir = 'Desktop {}'.format(self.num)
        return os.path.join(get_download_directory(), subdir)

    def _get_downloaded_images(self):
        if not os.path.exists(self.download_directory):
            return []
        return os.listdir(self.download_directory)

    def fetch_backgrounds(self, image_count):
        images = []
        for subreddit in self.subreddits:
            for image in subreddit.fetch_images():
                images.append(image)

        chooser_cls = _IMAGE_CHOOSER_CLASSES[get_image_chooser()]
        chooser = chooser_cls(self, images)
        chooser.sort()

        log(u'Number of images to download: {0}'.format(image_count))
        paths = []
        while True:
            if len(paths) >= image_count:
                break  # Reached user-specified limit...
            try:
                image = images.pop()
            except IndexError:
                warn(u'ran out of images before reaching number_of_images'
                     u' limit')
                break
            # Don't re-use an image that's already downloaded
            if image.filename in self.downloaded_images:
                log(u"'{}' already downloaded, skipping...".format(
                    image.filename), level=2)
                continue
            try:
                path = _download_to_directory(
                        image.url, self.download_directory, image.filename)
            except URLOpenError:
                warn(u"unable to download '{}', skipping...".format(image.url))
                continue  # Try next image...
            else:
                paths.append(path)

        return paths

    def set_background(self, path):
        log(u'Setting background for desktop {0}'.format(self.num))
        _OS_HANDLER.set_background(path, num=self.num)
        if get_desktop_symlink():
            filename = os.path.basename(path)
            desktop_path = os.path.expanduser('~/Desktop')
            link_name = os.path.join(desktop_path, filename)
            os.symlink(path, link_name)


def _get_desktops_with_defaults():
    """Desktop objects populated with sensible defaults.

    Customizations will be performed by overriding these values, first using
    the config file and later command-line options.
    """
    desktops = []
    for num, res in enumerate(_OS_HANDLER.get_desktop_resolutions(), start=1):
        width = int(res[0])
        height = int(res[1])
        desktop = Desktop(num, width, height,
                          subreddit_tokens=DEFAULT_SUBREDDIT_TOKENS)
        desktops.append(desktop)
    return desktops


class URLOpenError(Exception):
    pass


def _urlopen(url):
    opener = urllib2.build_opener()
    opener.addheaders = [('User-Agent', DEFAULT_USER_AGENT)]
    try:
        return opener.open(url)
    except (socket.error,
            urllib2.HTTPError,
            urllib2.URLError):
        raise URLOpenError


def _download_to_directory(url, dirname, filename):
    """Download a file to a particular directory"""
    _safe_makedirs(dirname)

    updatedFilename = re.sub('[,\" ]', '_', filename)

    log("Renaming {0} to {1}".format(filename, updatedFilename))

    path = os.path.join(dirname, updatedFilename)

    log(u"Downloading '{0}' to '{1}'".format(url, path))
    response = _urlopen(url)
    try:
        with open(path, 'w') as f:
            f.write(response.read())
    finally:
        response.close()

    return path


def _clear_download_directory():
    dirname = get_download_directory()
    if os.path.exists(dirname):
        shutil.rmtree(dirname)
    _safe_makedirs(dirname)


def _get_northern_hemisphere_season():
    """Source: http://stackoverflow.com/questions/16139306/determine-season-given-timestamp-in-python-using-datetime"""
    day = datetime.date.today().timetuple().tm_yday
    spring = range(80, 172)
    summer = range(172, 264)
    autumn = range(264, 355)
    if day in spring:
        return 'spring'
    elif day in summer:
        return 'summer'
    elif day in autumn:
        return 'autumn'
    else:
        return 'winter'


class Image(object):
    TITLE_MAX_LENGTH = 64

    def __init__(self, width, height, url, title, raw_reddit_score,
                 score=0.0,
                 aspect_ratio_score=0.0,
                 resolution_score=0.0,
                 jitter_score=0.0,
                 reddit_score=0.0):
        self.width = width
        self.height = height
        self.url = url
        self.title = title
        self.raw_reddit_score = raw_reddit_score
        self.score = score
        self.aspect_ratio_score = aspect_ratio_score
        self.resolution_score = resolution_score
        self.jitter_score = jitter_score
        self.reddit_score = reddit_score

    @property
    def display_title(self):
        if len(self.title) <= self.TITLE_MAX_LENGTH:
            return self.title
        else:
            return self.title[:self.TITLE_MAX_LENGTH - 3] + u'...'

    @property
    def filename(self):
        filename = self.display_title.replace(u'/', u'')\
                                     .replace(u'\\', u'')\
                                     .replace(u'.', u'')
        # Get extension from URL
        url_path = urlparse.urlparse(self.url).path
        parts = url_path.rsplit('.', 1)
        try:
            filename += u'.' + parts[1]
        except IndexError:
            pass
        return filename


class Subreddit(object):
    def __init__(self, desktop, name, sort='top', limit=25, timeframe='month'):
        self.desktop = desktop
        self.name = name
        self.sort = sort
        self.limit = limit
        self.timeframe = timeframe

    def fetch_images(self):
        url = 'http://reddit.com/r/{subreddit}/{sort}.json?t={timeframe}&limit={limit}'
        url = url.format(subreddit=self.name,
                         sort=self.sort,
                         timeframe=self.timeframe,
                         limit=self.limit)
        log("URL to fetch data  is " + url)

        try:
            response = _urlopen(url)
        except URLOpenError:
            warn("error fetching images from subreddit '{0}',"
                 " skipping...".format(self.name))
            return []

        try:
            data = json.loads(response.read())
        finally:
            response.close()

        images = []
        for child in data['data']['children']:
            data = child['data']
            try:
                image_data = data['preview']['images'][0]['source']
            except (KeyError, IndexError):
                continue
            else:
                image = Image(image_data['width'],
                              image_data['height'],
                              image_data['url'],
                              data['title'],
                              int(data['score']))
                images.append(image)

        return images

    @classmethod
    def handle_dynamic_subreddit_seasonal(cls, token_parts):
        """Dynamic subreddit handlers mutate token_parts in order to trigger
        dynamic behavior.
        """
        season = _get_northern_hemisphere_season().capitalize()
        token_parts[0] = '{}Porn'.format(season)

    @classmethod
    def create_from_token(cls, desktop, token):
        token_parts = token.split(':')

        # Handle any dynamic subreddits
        name = token_parts[0]
        if name.startswith('{') and name.endswith('}'):
            stripped_name = name[1:-1]
            handler_name = 'handle_dynamic_subreddit_{}'.format(stripped_name)
            func = getattr(cls, handler_name)
            func(token_parts)

        args = ('name', 'sort', 'limit', 'timeframe')
        ddict = {}
        for arg, value in zip(args, token_parts):
            ddict[arg] = value
        return cls(desktop, **ddict)

    def __repr__(self):
        return '<Subreddit r/{0}>'.format(self.name)


def _read_config_file(desktops):
    path = os.path.expanduser(DEFAULT_CONFIG_PATH)

    if not os.path.exists(path):
        return

    def parse_subreddit_tokens(desktop, section):
        try:
            tokens = map(lambda x: x.strip(),
                         config.get(section, 'subreddits').split(','))
        except ConfigParser.NoOptionError:
            pass
        else:
            if tokens:
                desktop.subreddit_tokens = tokens

    config = ConfigParser.ConfigParser()
    with open(path) as f:
        config.readfp(f)

    for desktop in desktops:
        section = 'desktop{0}'.format(desktop.num)
        if section not in config.sections():
            section = 'default'
        parse_subreddit_tokens(desktop, section)

    if 'default' in config.sections():
        try:
            set_image_count(config.getint('default', 'image_count'))
        except ConfigParser.NoOptionError:
            pass
        try:
            set_desktop_symlink(config.getboolean('default', 'desktop_symlink'))
        except ConfigParser.NoOptionError:
            pass
        try:
            download_directory = config.get('default', 'download_directory')
        except ConfigParser.NoOptionError:
            pass
        else:
            if download_directory:
                set_download_directory(download_directory)
        try:
            image_chooser = config.get('default', 'image_chooser')
        except ConfigParser.NoOptionError:
            pass
        else:
            if image_chooser:
                set_image_chooser(image_chooser)


def _handle_cli_options(desktops):
    parser = argparse.ArgumentParser(
        description='set desktop background image from reddit')
    parser.add_argument('subreddits', metavar='SUBREDDITS', nargs='*',
            help='a list of subreddits')
    parser.add_argument('--desktop', type=int, default=0,
            help='set background for this desktop'
                 ' (default: sets background for all desktops)')
    parser.add_argument('-v', '--verbose', action='count',
            help='log to stderr (use -vv for even more info)')
    parser.add_argument('--image-count', type=int,
            help="number of images to download (this only downloads the"
                 " images, it doesn't set the background)")
    parser.add_argument('--download-directory',
            help='directory to use to store images')
    parser.add_argument('--desktop-symlink',
            action='store_true',
            help='show a symlink to the image on your desktop')
    parser.add_argument('--what',
            action='store_true',
            help='display what images are downloaded for each desktop')
    parser.add_argument('--version',
                        action='version',
                        version=__version__)

    args = parser.parse_args()

    set_verbosity(args.verbose)
    set_what(args.what)

    if args.image_count is not None:
        set_image_count(args.image_count)

    if args.download_directory:
        set_download_directory(args.download_directory)

    if args.desktop:
        desktops = [d for d in desktops if d.num == args.desktop]
        if isinstance(_OS_HANDLER, LinuxHandler):
            warn(u'--desktop is ignored on Linux systems')

    if args.desktop_symlink:
        set_desktop_symlink(args.desktop_symlink)

    for desktop in desktops:
        if args.subreddits:
            desktop.subreddit_tokens = args.subreddits


def show_whats_downloaded(desktops):
    for desktop in desktops:
        print u"Desktop {}".format(desktop.num)
        for filename in  desktop.downloaded_images:
            print u"\t{}".format(filename)


def main():
    global _OS_HANDLER
    _OS_HANDLER = OSHandler.get_handler()

    # Configuration override order: defaults -> config-file -> cli-options
    desktops = _get_desktops_with_defaults()
    _read_config_file(desktops)
    _handle_cli_options(desktops)

    if get_what():
        show_whats_downloaded(desktops)
        return

    image_count = get_image_count()

    _clear_desktop_symlinks()
    _clear_download_directory()

    for desktop in desktops:
        if image_count > 0:
            # Download-only mode (downloads multiple images, but doesn't set
            # the background because we'll let the OS's native
            # background-setting utility handle it)
            desktop.fetch_backgrounds(image_count)
            log(u"Skipping setting background")
        else:
            # Set-background mode (download the best image, and set the
            # background ourselves)
            paths = desktop.fetch_backgrounds(1)
            if paths:
                desktop.set_background(paths[0])


if __name__ == "__main__":
    main()
